generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  address  String?
  phone    String?
  state    String?
  city     String?
  zipCode  String?
  country  String?
  company  Company?
}

model Company {
  id      String  @id @default(uuid())
  email   String?
  name    String
  address String?
  phone   String?
  state   String?
  city    String?
  zipCode String?
  country String?
  taxNo   String?
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @unique // relation scalar field (used in the `@relation` attribute above)
}

model Party {
  id          Int             @id @default(autoincrement())
  salutation  String?
  firstName   String
  lastName    String?
  email       String?
  comment     String?
  role        String
  type        String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  address     Address[]
  contact     Contact[]
  Bill        Bill[]
  ledgerEntry GeneralLedger[]
}

model Address {
  id           Int      @id @default(autoincrement())
  party        Party    @relation(fields: [partyId], references: [id])
  partyId      Int
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  country      String?
  postalCode   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Contact {
  id      Int     @id @default(autoincrement())
  party   Party   @relation(fields: [partyId], references: [id])
  partyId Int
  phone   String?
}

model Item {
  item_id            Int                 @id @default(autoincrement())
  item_name          String
  item_sku           String              @unique
  item_type          String
  uom                UOM?                @relation(fields: [unit_name], references: [unit_name], onDelete: Cascade, onUpdate: Cascade)
  unit_name          String?
  salePrice          Decimal?
  saleAccount        ChartOfAccounts?    @relation("chart_SaleAcc", fields: [saleAccountId], references: [id])
  saleAccountId      Int?
  purchasePrice      Decimal?
  purchaseAccount    ChartOfAccounts?    @relation("chart_CostAcc", fields: [purchaseAccountId], references: [id])
  purchaseAccountId  Int?
  inventoryAccount   ChartOfAccounts     @relation("chart_inventory_Account", fields: [inventoryAccountId], references: [id])
  inventoryAccountId Int                 @default(dbgenerated("3"))
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  discontinueDate    DateTime?           @db.Date
  CategoriesOnItems  CategoriesOnItems[]
  Warehouse          Warehouse?          @relation(fields: [warehouseId], references: [id])
  warehouseId        Int?
  openingStock       Decimal?
  openingStockValue  Decimal?
  BillItems          BillItems[]
}

model CategoriesOnItems {
  item       Item         @relation(fields: [itemId], references: [item_id])
  itemId     Int
  category   ItemCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@id([itemId, categoryId])
}

model ItemCategory {
  id                Int                 @id @default(autoincrement())
  name              String
  CategoriesOnItems CategoriesOnItems[]
}

//related to item
model UOM {
  unit_id   Int    @id @default(autoincrement())
  unit_name String @unique
  Item      Item[]
}

model Warehouse {
  id   Int    @id @default(autoincrement())
  name String
  Item Item[]
}

model Bill {
  id                Int              @id @default(autoincrement())
  Supplier          Party            @relation(fields: [supplierId], references: [id])
  supplierId        Int
  status            String           @default("Draft")
  billDate          DateTime?        @db.Date
  billDueDate       DateTime?        @db.Date
  billNo            String
  paymentTerms      Int              @default(0)
  paymentTermsLabel String?
  dueByDays         String?
  dueInDays         Int?
  subTotal          Decimal          @default(0) @db.Decimal(30, 2)
  total             Decimal          @default(0) @db.Decimal(30, 2)
  outStandingAmount Decimal          @default(0) @db.Decimal(30, 2)
  accountPayable    ChartOfAccounts? @relation(fields: [accountPayableId], references: [id])
  accountPayableId  Int?
  BillItems         BillItems[]
  transaction       Transaction[]
}

model BillItems {
  id       Int     @default(autoincrement())
  bill     Bill    @relation(fields: [billId], references: [id])
  billId   Int
  item     Item    @relation(fields: [itemId], references: [item_id])
  itemId   Int
  quantity Decimal @db.Decimal()
  rate     Decimal @db.Decimal()

  @@id([id, itemId])
}

model RootAccType {
  id    Int            @id @unique
  name  String         @unique
  group AccountGroup[]
}

model AccountGroup {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String?
  rootType        RootAccType       @relation(fields: [rootTypeId], references: [id])
  rootTypeId      Int
  chartOfAccounts ChartOfAccounts[]
}

model ChartOfAccounts {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  code           String?
  isArchived     Boolean         @default(false)
  description    String?
  accountNo      String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  group          AccountGroup    @relation(fields: [accountGroupId], references: [id], onUpdate: Cascade)
  accountGroupId Int
  saleAcc        Item[]          @relation("chart_SaleAcc")
  costAcc        Item[]          @relation("chart_CostAcc")
  invAcc         Item[]          @relation("chart_inventory_Account")
  ledgerEntry    GeneralLedger[]
  bill           Bill[]
}

model AccountingPeriod {
  id        Int      @id @default(autoincrement())
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
}

model Transaction {
  id            Int             @id @default(autoincrement())
  transacDate   DateTime        @db.Date
  description   String?
  transacType   String?
  bill          Bill?           @relation(fields: [billId], references: [id])
  billId        Int
  generalLedger GeneralLedger[]

  @@index([transacDate])
}

model GeneralLedger {
  id             Int             @default(autoincrement())
  transaction    Transaction     @relation(fields: [transactionId], references: [id])
  transactionId  Int
  account        ChartOfAccounts @relation(fields: [chartAccountId], references: [id])
  chartAccountId Int
  party          Party           @relation(fields: [partyId], references: [id])
  partyId        Int
  amount         Decimal         @db.Decimal(20, 2)
  dcFlag         String          @db.Bit(1)

  //0 for debit and 1 for credit
  @@id([id, transactionId])
  @@index([id, transactionId, chartAccountId])
}

model AccountBalance {
  id            Int    @id @default(autoincrement())
  charAccountId Int
  companyId     String
  monthId       Int
  acctgPeriodId Int
}
