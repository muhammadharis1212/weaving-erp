generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  address  String?
  phone    String?
  state    String?
  city     String?
  zipCode  String?
  country  String?
  company  Company?
}

model Company {
  id      String  @id @default(uuid())
  email   String?
  name    String
  address String?
  phone   String?
  state   String?
  city    String?
  zipCode String?
  country String?
  taxNo   String?
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @unique // relation scalar field (used in the `@relation` attribute above)
}

model Party {
  id         Int       @id @default(autoincrement())
  salutation String?
  firstName  String
  lastName   String?
  email      String?
  comment    String?
  role       String
  type       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  address    Address[]
  contact    Contact[]
  Bill       Bill[]
}

model Address {
  id           Int      @id @default(autoincrement())
  party        Party    @relation(fields: [partyId], references: [id])
  partyId      Int
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  country      String?
  postalCode   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Contact {
  id      Int     @id @default(autoincrement())
  party   Party   @relation(fields: [partyId], references: [id])
  partyId Int
  phone   String?
}

model Item {
  item_id                 Int                 @id @default(autoincrement())
  item_name               String
  item_sku                String              @unique
  item_type               String
  itemUnit                ItemUnit?           @relation(fields: [item_unit_name], references: [unit_name], onDelete: Cascade, onUpdate: Cascade)
  item_unit_name          String?
  item_SalePrice          Decimal             @db.Decimal(10, 2)
  chart_SaleAcc           ChartOfAccounts     @relation("chart_SaleAcc", fields: [item_SaleAccId], references: [id])
  item_SaleAccId          Int
  item_CostPrice          Decimal             @db.Decimal(10, 2)
  chart_CostAcc           ChartOfAccounts     @relation("chart_CostAcc", fields: [item_CostAccId], references: [id])
  item_CostAccId          Int
  chart_inventory_Account ChartOfAccounts     @relation("chart_inventory_Account", fields: [inventoryAccount], references: [id])
  inventoryAccount        Int                 @default(dbgenerated("3"))
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  discontinueDate         DateTime            @db.Date
  CategoriesOnItems       CategoriesOnItems[]
  Warehouse               Warehouse?          @relation(fields: [warehouseId], references: [id])
  warehouseId             Int?
  BillItem                BillItem[]
}

model CategoriesOnItems {
  item       Item         @relation(fields: [itemId], references: [item_id])
  itemId     Int
  category   ItemCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@id([itemId, categoryId])
}

model ItemCategory {
  id                Int                 @id @default(autoincrement())
  name              String
  CategoriesOnItems CategoriesOnItems[]
}

//related to item
model ItemUnit {
  unit_id   Int    @id @default(autoincrement())
  unit_name String @unique
  Item      Item[]
}

model Warehouse {
  id   Int    @id @default(autoincrement())
  name String
  Item Item[]
}

model Bill {
  id                Int       @id @default(autoincrement())
  Supplier          Party     @relation(fields: [supplierId], references: [id])
  supplierId        Int
  status            String    @default("Draft")
  billDate          DateTime? @db.Date
  billDueDate       DateTime? @db.Date
  billNo            String
  paymentTerms      Int       @default(0)
  paymentTermsLabel String?
  dueByDays         String?
  dueInDays         Int?

  BillItem BillItem[]
}

model BillItem {
  id       Int     @default(autoincrement())
  bill     Bill    @relation(fields: [billId], references: [id])
  billId   Int
  item     Item    @relation(fields: [itemId], references: [item_id])
  itemId   Int
  quantity Decimal @db.Decimal()
  rate     Decimal @db.Decimal()

  @@id([id, itemId])
}

model RootAccType {
  id    Int            @id @unique
  name  String         @unique
  group AccountGroup[]
}

model AccountGroup {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String?
  rootType        RootAccType       @relation(fields: [rootTypeId], references: [id])
  rootTypeId      Int
  chartOfAccounts ChartOfAccounts[]
}

model ChartOfAccounts {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  code            String?
  isArchived      Boolean         @default(false)
  description     String?
  accountNo       String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
  group           AccountGroup    @relation(fields: [accountGroupId], references: [id], onUpdate: Cascade)
  accountGroupId  Int
  saleAcc         Item[]          @relation("chart_SaleAcc")
  costAcc         Item[]          @relation("chart_CostAcc")
  invAcc          Item[]          @relation("chart_inventory_Account")
  generalLedgerId GeneralLedger[]
}

model AccountingPeriod {
  id        Int      @id @default(autoincrement())
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
}

model Transaction {
  id            Int             @id @default(autoincrement())
  t_date        DateTime        @db.Date
  entryDate     DateTime        @db.Date
  description   String
  //transDetail   TransactionDetail[]
  //transDetailId Int
  generalLedger GeneralLedger[]

  @@index([t_date])
}

// model TransactionDetail {
//   seqId         Int         @id @db.SmallInt
//   amount        Decimal     @db.Decimal(20, 2)
//   dcFlag        String      @db.Bit(1)
//   transaction   Transaction @relation(fields: [transactionId], references: [id])
//   transactionId Int
// }

model GeneralLedger {
  seqId          Int             @default(autoincrement())
  transaction    Transaction     @relation(fields: [transactionId], references: [id])
  transactionId  Int
  account        ChartOfAccounts @relation(fields: [chartAccountId], references: [id])
  chartAccountId Int
  amount         Decimal         @db.Decimal(20, 2)
  dcFlag         String          @db.Bit(1)

  @@id([seqId, transactionId])
  @@index([seqId, transactionId, chartAccountId])
}

model AccountBalance {
  id            Int    @id @default(autoincrement())
  charAccountId Int
  companyId     String
  monthId       Int
  acctgPeriodId Int
}
