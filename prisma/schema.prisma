generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  address  String?
  phone    String?
  state    String?
  city     String?
  zipCode  String?
  country  String?
  company  Company?
}

model Company {
  id      String   @id @default(uuid())
  email   String?
  name    String
  address String?
  phone   String?
  state   String?
  city    String?
  zipCode String?
  country String?
  taxNo   String?
  user    User     @relation(fields: [userId], references: [id])
  userId  String   @unique // relation scalar field (used in the `@relation` attribute above)
  vendors Vendor[]
}

model Vendor {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  address   String?
  phone     String?
  state     String?
  city      String?
  zipCode   String?
  country   String?
  reference String?
  taxNo     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId String
}

model Item {
  item_id        Int       @id @default(autoincrement())
  item_name      String
  item_sku       String
  item_type      String
  itemUnit       ItemUnit? @relation(fields: [item_unit], references: [unit_name], onDelete: Cascade, onUpdate: Cascade)
  item_unit      String?
  item_salePrice Int?
  item_saleAcc   String?
  item_cPrice    Int?
  item_cAcc      String?
}

// 
//related to item
model ItemUnit {
  unit_id   Int    @id @default(autoincrement())
  unit_name String @unique
  Item      Item[]
}

model RootAccType {
  rType String         @id @unique @db.Text
  group AccountGroup[]

  @@index([rType])
}

model AccountGroup {
  id              Int               @id @default(autoincrement())
  name            String            @unique @db.VarChar(50)
  rootType        RootAccType       @relation(fields: [rootTypeId], references: [rType], onUpdate: Cascade)
  rootTypeId      String
  chartOfAccounts ChartOfAccounts[]
}

model ChartOfAccounts {
  id             Int          @id @unique
  name           String       @unique
  isArchived     Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  group          AccountGroup @relation(fields: [accountGroupId], references: [id], onUpdate: Cascade)
  accountGroupId Int
}
